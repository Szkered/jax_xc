t3 = 3 ** (0.1e1 / 0.3e1)
t4 = math.pi ** (0.1e1 / 0.3e1)
t7 = 0.1e1 <= p_a_zeta_threshold
t8 = p_a_zeta_threshold - 0.1e1
t10 = jnp.where(t7, -t8, 0)
t11 = jnp.where(t7, t8, t10)
t12 = t11 + 0.1e1
t14 = p_a_zeta_threshold ** (0.1e1 / 0.3e1)
t16 = t12 ** (0.1e1 / 0.3e1)
t18 = jnp.where(t12 <= p_a_zeta_threshold, t14 * p_a_zeta_threshold, t16 * t12)
t19 = r0 ** (0.1e1 / 0.3e1)
t21 = 6 ** (0.1e1 / 0.3e1)
t22 = math.pi ** 2
t23 = t22 ** (0.1e1 / 0.3e1)
t24 = t23 ** 2
t25 = 0.1e1 / t24
t26 = t21 * t25
t28 = 2 ** (0.1e1 / 0.3e1)
t29 = t28 ** 2
t30 = r0 ** 2
t31 = t19 ** 2
t33 = 0.1e1 / t31 / t30
t36 = s0 * t29 * t33
t42 = t26 * s0 * t29 * t33 / (0.65124e1 + t26 * t36 / 0.24e2)
t44 = t42 / 0.12e2 - 0.1e1
t45 = t44 ** 2
t46 = t45 ** 2
t49 = t46 * t45
t59 = 0.5e1 / 0.9e1 * (tau0 * t29 / t31 / r0 - t36 / 0.8e1) * t21 * t25
t61 = 0.1e5 < t59
t62 = jnp.where(t61, t59, 0.1e5)
t63 = t62 ** 2
t69 = t63 ** 2
t73 = jnp.where(t61, 0.1e5, t59)
t74 = t73 ** 2
t75 = 0.1e1 - t74
t76 = t75 ** 2
t78 = t74 * t73
t85 = jnp.where(0.1e5 <= t59, 0.3e1 / 0.4e1 / t63 + 0.1e1 / t63 / t62 / 0.16e2 - 0.3e1 / 0.4e1 / t69 - 0.1e1 / 0.4e1, t76 * t75 / (0.1e1 + t78 * (0.1e1 + 0.4e1 * t78)))
t86 = t85 ** 2
t87 = t86 ** 2
t88 = t87 * t86
t93 = t87 * t85
t95 = t86 * t85
t97 = t87 * t95
t99 = t45 * t44
t101 = t46 * t44
t103 = t46 * t99
t107 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t87 - 0.15e2 / 0.4e1 * t86
t113 = 0.63e2 / 0.8e1 * t93 - 0.35e2 / 0.4e1 * t95 + 0.15e2 / 0.8e1 * t85
t120 = 0.429e3 / 0.16e2 * t97 - 0.693e3 / 0.16e2 * t93 + 0.315e3 / 0.16e2 * t95 - 0.35e2 / 0.16e2 * t85
t123 = -0.57084476241712602813e-1 * t46 - 0.38230940935406268094e0 * t45 + 0.73000610738035552688e-1 * t49 + 0.44142553981357691475e-2 * t88 - 0.12287293765057329462e-1 * t87 + 0.63559222793315408625e-2 * t86 + 0.19451907596748125344e0 * t85 + 0.52279783829707640062e-1 * t93 - 0.5923137049970073438e-2 * t95 - 0.54303814303104071062e-1 * t97 - 0.8047507298914579188e-2 * t99 + 0.50197247070683313037e-1 * t101 - 0.40204197854033482912e-1 * t103 + 0.50995906979556666e-2 * t44 * t107 + 0.16437722411542371e-2 * t44 * t113 + 0.23160016166370034e-2 * t44 * t120
t125 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t45
t129 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t86
t134 = 0.5e1 / 0.2e1 * t95 - 0.3e1 / 0.2e1 * t85
t144 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t88 - 0.315e3 / 0.16e2 * t87 + 0.105e3 / 0.16e2 * t86
t151 = 0.5e1 / 0.2e1 * t99 - t42 / 0.8e1 + 0.3e1 / 0.2e1
t168 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t46 - 0.15e2 / 0.4e1 * t45
t173 = -0.13135604251829597e-1 * t125 * t85 - 0.835331263170036e-3 * t125 * t129 - 0.8670535705479461e-3 * t125 * t134 + 0.3180493235941731e-3 * t125 * t107 + 0.8482767148525194e-4 * t125 * t113 - 0.9048853909642742e-3 * t125 * t144 + 0.18939021743243079e-3 * t125 * t120 - 0.16823429546012295e-1 * t151 * t85 - 0.7823588139015819e-4 * t151 * t129 + 0.27822064319562786e-2 * t151 * t134 - 0.4704436332280876e-2 * t151 * t107 + 0.12131628073942294e0 * t44 * t85 + 0.12341314639045392e-2 * t44 * t129 + 0.24977311122498513e-2 * t44 * t134 - 0.1792697304428732e-4 * t168 * t120 + 0.1331797359718674e-3 * t168 * t144
t196 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t49 - 0.315e3 / 0.16e2 * t46 + 0.105e3 / 0.16e2 * t45
t204 = 0.63e2 / 0.8e1 * t101 - 0.35e2 / 0.4e1 * t99 + 0.5e1 / 0.32e2 * t42 - 0.15e2 / 0.8e1
t215 = -0.7261106354828029e-4 * t168 * t113 - 0.2571281595426713e-3 * t168 * t134 + 0.9891355730978566e-3 * t168 * t107 - 0.14878680171769923e-2 * t168 * t129 - 0.21100890252897446e-2 * t168 * t85 - 0.689695394243961e-3 * t151 * t144 + 0.4308565933608885e-3 * t151 * t120 - 0.19375881298946268e-3 * t151 * t113 + 0.5970286163074767e-3 * t44 * t144 - 0.7631605623646023e-2 * t196 * t129 + 0.28206838819829017e-2 * t196 * t85 - 0.5194058669188706e-3 * t204 * t120 - 0.38541498256550073e-2 * t204 * t113 - 0.7555456486598222e-2 * t204 * t144 - 0.10249162124576494e-2 * t204 * t107 - 0.3656012084198544e-4 * t204 * t134
t224 = 0.429e3 / 0.16e2 * t103 - 0.693e3 / 0.16e2 * t101 + 0.315e3 / 0.16e2 * t99 - 0.35e2 / 0.192e3 * t42 + 0.35e2 / 0.16e2
t250 = 0.13669196781387441795e1 + 0.5061925051098745e-2 * t204 * t129 - 0.16609256494831233e-2 * t204 * t85 + 0.10726279571787276e-1 * t224 * t134 - 0.1006770315965861e-1 * t224 * t129 + 0.17309630990864668e-3 * t224 * t85 - 0.18156466410673526e-3 * t196 * t120 + 0.1864317026752979e-2 * t196 * t144 - 0.31296536914037784e-2 * t196 * t113 - 0.9195715678311926e-2 * t196 * t134 + 0.8367073496483024e-3 * t196 * t107 - 0.29476504977320184e-3 * t224 * t120 + 0.38758929812102785e-2 * t224 * t113 - 0.19095139973664826e-3 * t224 * t144 - 0.31389079758955066e-3 * t224 * t107 - 0.11145877912279910870e-1 * t42
t256 = jnp.where(r0 / 0.2e1 <= p_a_dens_threshold, 0, -0.3e1 / 0.8e1 * t3 / t4 * t18 * t19 * (t123 + t173 + t215 + t250))
res = 0.2e1 * t256
